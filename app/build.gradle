buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://repo.spring.io/plugins-release" }
        maven { url "https://repo1.maven.org/maven2" }

    }
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:5.0.0"
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

plugins {
    id "java"
    id "maven-publish"
    id "idea"
    id "eclipse"
    id "jacoco"
    id "org.springframework.boot"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "org.openapi.generator" version "5.3.0"
    id "com.github.node-gradle.node"
    id "org.sonarqube"
    id "io.spring.nohttp"
    id "com.github.andygoossens.gradle-modernizer-plugin"
    id "de.undercouch.download" version "4.1.2"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

group = "com.rs.detector"
version = "0.0.1-SNAPSHOT"

description = ""

sourceCompatibility=11
targetCompatibility=11
assert System.properties["java.specification.version"] == "11" || "12" || "13" || "14" || "15" || "16" || "17"

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"
apply from: "gradle/swagger.gradle"
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here



if (project.hasProperty("prod") || project.hasProperty("gae")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

if (project.hasProperty("gae")) {
    apply plugin: 'maven'
    apply plugin: 'org.springframework.boot.experimental.thin-launcher'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom "tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}"
        }
    }
    appengineStage.dependsOn thinResolve
}

if (project.hasProperty("zipkin")) {
    apply from: "gradle/zipkin.gradle"
}

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

defaultTasks "bootRun"

//springBoot {
 //   mainClassName = "com.rs.detector.MeasureDetectorApp"
// }

test {
    systemProperty 'spring.profiles.active', 'dev-mock'
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    jvmArgs += '-Djava.security.egd=file:/dev/./urandom -Xmx256m'
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false

    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
        jvmArgs += [
            "-XX:+AllowRedefinitionToAddDeleteMethods"
        ]
    }
}
modernizer {
    failOnViolations = true
    includeTestClasses = true
}

bootRun {
    systemProperties = System.properties
}

task integrationTest(type: Test) {
    bootRun.systemProperty('spring.profiles.active', 'dev')
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    jvmArgs += '-Djava.security.egd=file:/dev/./urandom -Xmx256m'
    if (project.hasProperty('testcontainers')) {
        environment 'SPRING_PROFILES_ACTIVE', 'testcontainers'
    }

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false

    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
        jvmArgs += [
            "-XX:+AllowRedefinitionToAddDeleteMethods"
        ]
    }
}

task integrationTestsMockMeasureDetector(type: Test) {
    useJUnitPlatform()
    bootRun.systemProperty('spring.profiles.active', 'dev-mock')
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    jvmArgs += '-Djava.security.egd=file:/dev/./urandom -Xmx256m'
    if (project.hasProperty('testcontainers')) {
        environment 'SPRING_PROFILES_ACTIVE', 'testcontainers'
    }

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false

    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
        jvmArgs += [
            "-XX:+AllowRedefinitionToAddDeleteMethods"
        ]
    }
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}


gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
    toolVersion "${checkstyleVersion}"
    configFile file("checkstyle.xml")
    checkstyleTest.enabled = false
}
nohttp {
    source.include "build.gradle", "README.md"
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
    all {
        resolutionStrategy {
            // Inherited version from Spring Boot can't be used because of regressions:
            // To be removed as soon as spring-boot use the same version
            force 'org.liquibase:liquibase-core:4.6.1'
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    //jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

dependencies {

    implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.24'
    implementation group: 'org.apache.pdfbox', name: 'jbig2-imageio', version: '3.0.3'
    implementation 'org.jobrunr:jobrunr-spring-boot-starter:5.0.0'

    implementation "org.openapitools:jackson-databind-nullable:0.2.1"



    // import JHipster dependencies BOM
    if (!project.hasProperty("gae")) {
        implementation platform("tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}")
    }

    // Use ", version: jhipsterDependenciesVersion, changing: true" if you want
    // to use a SNAPSHOT release instead of a stable release
    implementation group: "tech.jhipster", name: "jhipster-framework", {
        exclude group: "org.springframework", module: "spring-webmvc"
    }
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation "javax.servlet:javax.servlet-api:4.0.1"
    implementation "javax.transaction:javax.transaction-api:1.3"
    implementation "javax.cache:cache-api:1.1.1"

    implementation "io.dropwizard.metrics:metrics-core:4.2.9"
    implementation "io.micrometer:micrometer-registry-prometheus:1.8.4"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc:2.13.2"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.2"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.13.2"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.13.2"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.13.2.2"
    implementation "org.hibernate:hibernate-core:6.0.0.Final"
    implementation "org.hibernate:hibernate-entitymanager:6.0.0.Alpha7"
    implementation "com.zaxxer:HikariCP:5.0.1"
    implementation "commons-beanutils:commons-beanutils:${commonsBeanutilsVersion}"
    implementation "org.apache.commons:commons-lang3:3.12.0"
    implementation "org.hibernate.validator:hibernate-validator:8.0.0.Alpha3"
    implementation "org.liquibase:liquibase-core:4.9.1"
    implementation "org.springframework.boot:spring-boot-loader-tools:2.6.6"
    implementation "org.springframework.boot:spring-boot-starter-mail:2.6.6"
    implementation "org.springframework.boot:spring-boot-starter-logging:2.6.6"
    implementation "org.springframework.boot:spring-boot-starter-actuator:2.6.6"
    implementation "org.springframework.boot:spring-boot-starter-data-r2dbc:2.6.6"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:2.6.6"
    // implementation 'jakarta.persistence:jakarta.persistence-api:3.0.0'


    testImplementation "org.testcontainers:mysql:1.16.3"
    implementation "org.springframework.boot:spring-boot-starter-security:2.6.6"
    implementation ("org.springframework.boot:spring-boot-starter-webflux:2.6.6") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-validation:2.6.6"
    implementation "io.netty:netty-tcnative-boringssl-static:2.0.51.Final"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf:2.6.6"
    implementation "org.zalando:problem-spring-webflux:0.28.0-RC.0"
    implementation "org.springframework.cloud:spring-cloud-starter-bootstrap:3.1.1"
    implementation "org.springframework.security:spring-security-config:5.6.2"
    implementation "org.springframework.security:spring-security-web:5.6.2"
    implementation "io.jsonwebtoken:jjwt-api:0.11.2"
    if (!project.hasProperty("gae")) {
        runtimeOnly "io.jsonwebtoken:jjwt-impl:0.11.2"
        implementation "io.jsonwebtoken:jjwt-jackson:0.11.2"
    } else {
        implementation "io.jsonwebtoken:jjwt-impl:0.11.2"
        implementation "io.jsonwebtoken:jjwt-jackson:0.11.2"
    }
    implementation ("io.springfox:springfox-oas:3.0.0")
    implementation ("io.springfox:springfox-swagger2:3.0.0")
    implementation "io.springfox:springfox-bean-validators:3.0.0"
    implementation "mysql:mysql-connector-java:8.0.28"
    implementation "dev.miku:r2dbc-mysql:0.8.2.RELEASE"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:6.0.0.Final"
    annotationProcessor "org.glassfish.jaxb:jaxb-runtime:${jaxbRuntimeVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test:2.6.6"
    implementation "org.springframework.boot:spring-boot-starter-test:2.6.6"
    testImplementation "org.springframework.security:spring-security-test:5.6.2"
    testImplementation "org.springframework.boot:spring-boot-test:2.6.6"
    testImplementation "io.projectreactor.tools:blockhound-junit-platform:${blockhoundJunitPlatformVersion}"
    testImplementation "io.projectreactor:reactor-test:3.4.16"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:${junitPlatformLauncherVersion}'
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}"
    testImplementation "com.h2database:h2-mvstore:2.1.210"
   //  liquibaseRuntime "com.h2database:h2-mvstore:1.4.200"

    //testImplementation "io.r2dbc:r2dbc-h2:0.9.1.RELEASE"
    implementation "io.r2dbc:r2dbc-h2:0.9.1.RELEASE"
    developmentOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
    implementation "org.tensorflow:libtensorflow:1.13.1"
//    implementation "org.tensorflow:libtensorflow_jni_gpu:1.13.1"
    implementation 'org.processing:core:3.3.6'

    implementation "org.tensorflow:libtensorflow_jni:1.13.1"
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here
}

if (project.hasProperty("gae")) {
    task createPom {
        def basePath = 'build/resources/main/META-INF/maven'
        doLast {
            pom {
                withXml(dependencyManagement.pomConfigurer)
            }.writeTo("${basePath}/${project.group}/${project.name}/pom.xml")
        }
    }
    bootJar.dependsOn = [createPom]
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "7.0.2"
}

task downloadMeasureDetectorModel(type: Download) {
    // Not sure, whether this is a perma link
    acceptAnyCertificate true
    src "https://github.com/OMR-Research/MeasureDetector/releases/download/v1.0/2019-05-16_faster-rcnn-inception-resnet-v2.pb"
    dest buildDir.toString() + "/measure-detector-tf-model/md-model.pb"
    overwrite false
}

if (project.hasProperty("nodeInstall")) {
    // Workaround node grade plugin not working on apple silicon https://github.com/node-gradle/gradle-node-plugin/issues/154
    OperatingSystem os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentOperatingSystem();
    Architecture arch = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentArchitecture();
    Boolean downloadNode = !os.isMacOsX() || arch.isAmd64()
    node {
        version = "14.18.1"
        npmVersion = "8.1.4"
        download = downloadNode
    }
}

openApiGenerate {

    globalProperties = [ supportingFiles: "ApiUtil.java" ]
    generatorName = "spring"
    inputSpec = "$rootDir/api/api.yml".toString()
    outputDir = "$buildDir/openapi".toString()
    apiPackage = "com.rs.detector.web.api"
    modelPackage = "com.rs.detector.web.api.model"
    apiFilesConstrainedTo = [""]
    modelFilesConstrainedTo = [""]
//    generateSupportingFiles = true
//    supportingFilesConstrainedTo = ["ApiUtil.java"]
    configOptions = [
        delegatePattern: "true",
        title: "measure-detector",
        serializableModel: "True",
        apisToGenerate: "",
        generateSupportingFiles: "true",
        supportingFiles: "ApiUtil.java"
    ]
    validateSpec = true
//    importMappings = [Problem:"org.zalando.problem.Problem"]
//    systemProperties = [
//        apis: "false",
//        generateSupportingFiles: "true",
//        supportingFiles: "ApiUtil.java"
//    ]
}
//springdoc.packagesToScan=com.rs.detector.web



compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo
